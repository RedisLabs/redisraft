# Sequence Diagrams

The data flow diagrams are generated with [PlantUML](https://plantuml.com).

To edit them interactively, it's easiest to use PyCharm (or any other JetBrains IDE)
with the builtin support for Markdown with embedded PlantUML.

## Editing with PyCharm

[Follow the instructions](https://www.jetbrains.com/help/idea/markdown.html)
to configure the Markdown editor with PlantUML support.

## Rendering to SVG

Make sure to install the PlantUML CLI (`brew install plantuml` on a Mac).

Then, run:

    plantuml -tsvg *.puml


# CLUSTER JOIN

@startuml

actor user
participant "Node 2" as node2
participant "Node 1" as node1
participant "Node 3" as node3

activate node1
activate node3

user -> node2: RAFT.CLUSTER\nJOIN <node1>
activate node2
node2 -> node2: cmdRaftCluster\n  RaftReqSubmit\n    -> RR_CLUSTER_JOIN
node2 -> node2: RaftReqHandleQueue\n  handleClusterJoin\n    -> state: REDIS_RAFT_JOINING
node2 -> node1: HandleNodeStates\n  initiateNodeAdd\n      NodeConnect\n        sendNodeAddRequest\n          redisAsyncCommand\n            RAFT.NODE ADD 2 <node1>

node1 -> node1: cmdRaftNode\n  hasNodeIdBeenUsed\n  RaftReqSubmit\n  -> RR_CFGCHANGE_ADDNODE
node1 -> node1: RaftReqHandleQueue\n  handleCfgChange\n    raft_recv_entry\n      RAFT_LOGTYPE_ADD_NONVOTING_NODE
node1 --> node2: <node_id> <dbid>

node2 -> node2: handleNodeAddResponse\n  HandleClusterJoinCompleted\n    -> state: REDIS_RAFT_UP
node1 -> node1: raftNotifyMembershipEvent\n  RAFT_MEMBERSHIP_ADD\n  RAFT_LOGTYPE_ADD_NONVOTING_NODE\n    addUsedNodeId(2)
node1 -> node2: <<replicate log>>
node1 -> node3: <<replicate log>>

node2 -> node2: raftNotifyMembershipEvent\n  RAFT_MEMBERSHIP_ADD\n  RAFT_LOGTYPE_ADD_NONVOTING_NODE\n    addUsedNodeId(2)
node3 -> node3: raftNotifyMembershipEvent\n  RAFT_MEMBERSHIP_ADD\n  RAFT_LOGTYPE_ADD_NONVOTING_NODE\n    addUsedNodeId(2)

@enduml